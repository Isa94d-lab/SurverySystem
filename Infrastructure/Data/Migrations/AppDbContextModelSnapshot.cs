// <auto-generated />
using System;
using Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Infrastructure.Data.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.Categories_catalog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Created_at")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<DateTime>("Updated_at")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Categories_catalog");
                });

            modelBuilder.Entity("Domain.Entities.Category_options", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Catalogoptions_id")
                        .HasColumnType("integer");

                    b.Property<int>("Categories_CatalogId")
                        .HasColumnType("integer");

                    b.Property<int>("Categoriesoptions_id")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Created_at")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Options_ResponseId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Updated_at")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("Categories_CatalogId");

                    b.HasIndex("Options_ResponseId");

                    b.ToTable("Category_options");
                });

            modelBuilder.Entity("Domain.Entities.Chapters", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Chapter_number")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Chapter_title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Componenthtml")
                        .HasColumnType("text");

                    b.Property<string>("Componentreact")
                        .HasColumnType("text");

                    b.Property<DateTime>("Created_at")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("SurveysId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Updated_at")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("survey_id")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("SurveysId");

                    b.ToTable("Chapters");
                });

            modelBuilder.Entity("Domain.Entities.Option_questions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Categories_CatalogId")
                        .HasColumnType("integer");

                    b.Property<string>("Comment_optionres")
                        .HasColumnType("text");

                    b.Property<DateTime>("Created_at")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Numberoption")
                        .HasColumnType("text");

                    b.Property<int>("Option_QuestionsId")
                        .HasColumnType("integer");

                    b.Property<int>("Option_id")
                        .HasColumnType("integer");

                    b.Property<int>("Optioncatalog_id")
                        .HasColumnType("integer");

                    b.Property<int>("Optionquestions_id")
                        .HasColumnType("integer");

                    b.Property<int>("Options_ResponseId")
                        .HasColumnType("integer");

                    b.Property<int>("Sub_QuestionsId")
                        .HasColumnType("integer");

                    b.Property<int>("Subquestion_id")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Updated_at")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("Categories_CatalogId");

                    b.HasIndex("Option_QuestionsId");

                    b.HasIndex("Options_ResponseId");

                    b.HasIndex("Sub_QuestionsId");

                    b.ToTable("Option_questions");
                });

            modelBuilder.Entity("Domain.Entities.Options_response", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Created_at")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Optiontext")
                        .HasColumnType("text");

                    b.Property<DateTime>("Updated_at")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Options_response");
                });

            modelBuilder.Entity("Domain.Entities.Questions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Chapter_id")
                        .HasColumnType("integer");

                    b.Property<int>("ChaptersId")
                        .HasColumnType("integer");

                    b.Property<string>("Comment_question")
                        .HasColumnType("text");

                    b.Property<DateTime>("Created_at")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Question_number")
                        .HasColumnType("text");

                    b.Property<string>("Question_text")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Response_type")
                        .HasColumnType("text");

                    b.Property<DateTime>("Updated_at")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ChaptersId");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("Domain.Entities.Sub_questions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Comment_subquestion")
                        .HasColumnType("text");

                    b.Property<DateTime>("Created_at")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("QuestionsId")
                        .HasColumnType("integer");

                    b.Property<int>("Subquestion_id")
                        .HasColumnType("integer");

                    b.Property<string>("Subquestion_number")
                        .HasColumnType("text");

                    b.Property<string>("Subquestiontext")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("Updated_at")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("QuestionsId");

                    b.ToTable("Sub_questions");
                });

            modelBuilder.Entity("Domain.Entities.Sumaryoptions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Code_number")
                        .HasColumnType("text");

                    b.Property<int>("Id_survey")
                        .HasColumnType("integer");

                    b.Property<int>("Idquestion")
                        .HasColumnType("integer");

                    b.Property<int>("SurveysId")
                        .HasColumnType("integer");

                    b.Property<string>("Valuerta")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("SurveysId");

                    b.ToTable("Sumaryoptions");
                });

            modelBuilder.Entity("Domain.Entities.Surveys", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Componenthtml")
                        .HasColumnType("text");

                    b.Property<string>("Componentreact")
                        .HasColumnType("text");

                    b.Property<DateTime>("Created_at")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("Updated_at")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("instruction")
                        .HasColumnType("text");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Surveys");
                });

            modelBuilder.Entity("Domain.Entities.Category_options", b =>
                {
                    b.HasOne("Domain.Entities.Categories_catalog", "Categories_Catalog")
                        .WithMany()
                        .HasForeignKey("Categories_CatalogId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Options_response", "Options_Response")
                        .WithMany()
                        .HasForeignKey("Options_ResponseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Categories_Catalog");

                    b.Navigation("Options_Response");
                });

            modelBuilder.Entity("Domain.Entities.Chapters", b =>
                {
                    b.HasOne("Domain.Entities.Surveys", "Surveys")
                        .WithMany("Chapters")
                        .HasForeignKey("SurveysId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Surveys");
                });

            modelBuilder.Entity("Domain.Entities.Option_questions", b =>
                {
                    b.HasOne("Domain.Entities.Categories_catalog", "Categories_Catalog")
                        .WithMany()
                        .HasForeignKey("Categories_CatalogId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Option_questions", "Option_Questions")
                        .WithMany()
                        .HasForeignKey("Option_QuestionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Options_response", "Options_Response")
                        .WithMany()
                        .HasForeignKey("Options_ResponseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Sub_questions", "Sub_Questions")
                        .WithMany()
                        .HasForeignKey("Sub_QuestionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Categories_Catalog");

                    b.Navigation("Option_Questions");

                    b.Navigation("Options_Response");

                    b.Navigation("Sub_Questions");
                });

            modelBuilder.Entity("Domain.Entities.Questions", b =>
                {
                    b.HasOne("Domain.Entities.Chapters", "Chapters")
                        .WithMany("Questions")
                        .HasForeignKey("ChaptersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Chapters");
                });

            modelBuilder.Entity("Domain.Entities.Sub_questions", b =>
                {
                    b.HasOne("Domain.Entities.Questions", null)
                        .WithMany("Sub_Questions")
                        .HasForeignKey("QuestionsId");
                });

            modelBuilder.Entity("Domain.Entities.Sumaryoptions", b =>
                {
                    b.HasOne("Domain.Entities.Surveys", "Surveys")
                        .WithMany()
                        .HasForeignKey("SurveysId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Surveys");
                });

            modelBuilder.Entity("Domain.Entities.Chapters", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("Domain.Entities.Questions", b =>
                {
                    b.Navigation("Sub_Questions");
                });

            modelBuilder.Entity("Domain.Entities.Surveys", b =>
                {
                    b.Navigation("Chapters");
                });
#pragma warning restore 612, 618
        }
    }
}
